# -*- coding: utf-8 -*-
"""
Counting_sort.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h592cR23Ds96gQRQxeD6KyXYs5mm7eej

# Counting Sort

Importação da biblioteca Pandas:
"""

import pandas as pd

"""
Importação da biblioteca para importar dados do drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""
Importação de dados do Drive
"""

data = pd.read_csv('/content/drive/MyDrive/Google-Playstore.csv')

"""
Colunas:
"""

for i in data:
    print(i)

"""
Lista que recebe os valores da coluna Rating Count:
"""

lista = []

for d in data['Rating Count']:
    if isinstance(d, float) and str(d) != 'nan':
        lista.append(int(d))

"""
Algoritmo de ordenação em contagem:
"""

def counting_sort(l):
    counting_values = [0] * (max(l) + 1)
    for number in l:
        counting_values[number] += 1

    positions = [0] * len(l)
    current = 0

    for index, value in enumerate(counting_values):
        for pos in range(value):
            positions[current] = index
            current += 1

    return positions

""" Análise de código:

---- Considere **```n```** como o tamanho da lista **```l```**, que é parâmetro da função.

> Na linha 2, deste trecho, tem-se:
```
counting_values = [0] * (max(l) + 1)
```
> A quantidade de passos é determinada pelo tamanho da lista, ou seja, ```n``` passos.

> Em sequência, tem-se:
```
for number in l:
    counting_values[number] += 1
```
> Aqui, para cada número em ```l```, faz se umaz soma, totalizando também ```n``` passos.

> Depois, outra atribuição semelhante, de ```n``` passos:
```
positions = [0] * len(l)
current = 0
```

> Por fim, tem-se:
```
for index, value in enumerate(counting_values):
    for pos in range(value):
        positions[current] = index
        current += 1
```
> Aqui, para cada ```len(n)``` operações, são realizdas ```k``` operações, onde ```k``` é o número do intervalo de valores da lista.

Como o algoritmo depende apenas das duas contagens, sua complexidade é **```O(n+k)```**.

---
Impressão dos elementos:
"""

for i in lista:
    print(i)

"""
Atribuição dos elementos da lista em ordem com a **ordenação em contagem**:
"""

sorted_elements = counting_sort(lista)

"""
Impressão dos elementos da nova lista:
"""

for e in sorted_elements:
    print(e)

"""
O tempo de execução foi:
"""

import time
import matplotlib.pyplot as plot

start = time.process_time()
counting_sort(lista)
end = time.process_time()

print("Tempo de execução: {:.5f} segundos".format(end-start))

"""

### Especificações de execução:

- Sistema: Windows 7 Pro
- Tipo SO: 64 bits
- RAM: 2 GB
- Ambiente: Google Colaboratory © 2023
- Linguagem: Python 3
- Análise de código: Manual
- Tempo de execução total médio da função: 23s
"""